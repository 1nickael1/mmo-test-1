#!/usr/bin/env node

// Script de deploy para Vercel
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log("üöÄ Preparando deploy para Vercel...\n");

// Verificar se estamos em produ√ß√£o
const isProduction = process.env.NODE_ENV === "production";

if (!isProduction) {
  console.log('‚ö†Ô∏è  NODE_ENV n√£o est√° definido como "production"');
  console.log("   Configure NODE_ENV=production na Vercel\n");
}

// Verificar vari√°veis obrigat√≥rias
const requiredEnvVars = ["JWT_SECRET", "NODE_ENV"];

const missingVars = requiredEnvVars.filter((varName) => !process.env[varName]);

if (missingVars.length > 0) {
  console.log("‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas:");
  missingVars.forEach((varName) => {
    console.log(`   - ${varName}`);
  });
  console.log("\nüìù Configure essas vari√°veis no painel da Vercel:\n");
  console.log("   NODE_ENV=production");
  console.log("   JWT_SECRET=sua-chave-secreta-super-segura");
  console.log("\nüí° Supabase Database (obrigat√≥rio para produ√ß√£o):");
  console.log(
    "   POSTGRES_URL=postgres://postgres.user:password@aws-1-sa-east-1.pooler.supabase.com:6543/postgres"
  );
  console.log("   POSTGRES_USER=postgres");
  console.log("   POSTGRES_HOST=db.project-id.supabase.co");
  console.log("   POSTGRES_PASSWORD=your-password");
  console.log("   POSTGRES_DATABASE=postgres");
  console.log("   SUPABASE_URL=https://project-id.supabase.co");
  console.log("   SUPABASE_ANON_KEY=your-supabase-anon-key");
  console.log("   SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key");
  console.log("   SUPABASE_JWT_SECRET=your-supabase-jwt-secret\n");
}

// Verificar se o banco de dados est√° configurado
const hasPostgresUrl = !!process.env.POSTGRES_URL;
const hasDatabaseUrl = !!process.env.DATABASE_URL;

if (!hasPostgresUrl && !hasDatabaseUrl) {
  console.log("‚ö†Ô∏è  POSTGRES_URL n√£o configurado");
  console.log("   O sistema usar√° SQLite (dados ser√£o perdidos a cada deploy)");
  console.log("   OBRIGAT√ìRIO: Configure Supabase PostgreSQL na Vercel\n");
} else {
  console.log("‚úÖ POSTGRES_URL configurado - Supabase PostgreSQL ser√° usado\n");
}

// Verificar arquivos de configura√ß√£o
const configFiles = [
  "vercel.json",
  "nuxt.config.ts",
  "DEPLOY_VERCEL.md",
  "supabase-schema.sql",
  "scripts/seed-supabase.js",
  "scripts/populate-game-data.js",
  "scripts/complete-seed.js",
];

console.log("üìÅ Verificando arquivos de configura√ß√£o:");
configFiles.forEach((file) => {
  if (fs.existsSync(file)) {
    console.log(`   ‚úÖ ${file}`);
  } else {
    console.log(`   ‚ùå ${file} - Arquivo n√£o encontrado`);
  }
});

console.log("\nüîß Pr√≥ximos passos:");
console.log("1. Configure as vari√°veis de ambiente na Vercel");
console.log("2. Execute o schema: supabase-schema.sql no Supabase SQL Editor");
console.log("3. Popule o banco:");
console.log("   - Seed b√°sico: npm run seed:supabase");
console.log("   - Seed completo: npm run seed:complete");
console.log("   - Popula√ß√£o m√°xima: npm run populate:game");
console.log("4. Conecte seu reposit√≥rio GitHub √† Vercel");
console.log("5. Execute o deploy");
console.log("6. Teste as funcionalidades:\n");
console.log("   - Registro: /cadastro");
console.log("   - Login: /login");
console.log("   - Admin: /admin (root/root)");
console.log("   - Personagens: /personagem");
console.log("   - Loja: /loja");
console.log("   - Batalhas: /batalhas");

console.log("\nüìö Documenta√ß√£o completa: DEPLOY_VERCEL.md");
console.log("üéØ Deploy pronto para produ√ß√£o!");
